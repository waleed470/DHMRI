@model DHMRice.Models.Party
@using DHMRice.Models;
@{
    ViewBag.Title = "AllRice";
    Layout = null;
    ApplicationDbContext db = new ApplicationDbContext();
    decimal SumAmount = 0;
    decimal SumPaidAmount = 0;
    decimal SumBalance = 0;
    decimal remaining = 0;
    decimal Sumremaining = 0;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Raw Rice Stock</title>



    <link rel="stylesheet" href="~/Content/Invoices/style.css">

</head>
<body>

    <html>
    <head>
        <meta charset="utf-8">
        <title>Invoice</title>
        <link rel="stylesheet" href="style.css">
        <link rel="license" href="https://www.opensource.org/licenses/mit-license/">
        <script src="script.js"></script>
    </head>
    <body>
        <header>
            <h1>Party Detail</h1>
            <address contenteditable>
                <p>55-Circular Road</p>
                <p>Akbari Mandi Lahore</p>
                <p>03018412091,03229112107</p>
            </address>
            <span><img alt="" src="~/Content/Invoices/logo.png"><input type="file" accept="image/*"></span>
        </header>
        <article>
            <h1>Recipient</h1>
            <address>

            </address>
            <div class="row">
                <div class="col-lg-4">
                    <p>Party Name: @Model.Party_Name</p>
            </div>
            <div class="col-lg-4"></div>
            <div class="col-lg-4">
                <table class="meta">
                    <tr>
                        <th>Invoice #</th>
                        <td>101138</td>
                    </tr>
                    <tr>
                        <th>Date</th>
                        <td>@DateTime.Now</td>
                    </tr>
                    <tr>
                        <th>Amount Due</th>
                        <td>9</td>
                    </tr>
                </table>
            </div>
        </div>
            <table class="inventory">
                <thead>
                    <tr>
                        <th>Sr#</th>
                        <th>Category</th>
                        <th>Item Name</th>
                        <th>Rate</th>
                        <th>Quantity</th>
                       
                        <th>Total Amount</th>
                        <th>Credit  </th>
                        <th>Debit</th>
                        <th>Remaining</th>

                    </tr>
                </thead>
                <tbody>
                    @{ var sr = 0; }
                    @foreach (var item in db.RawRice_Sales_pt.Where(r => r.Party_Id == Model.Party_Id).ToList())
                    {
                        remaining = 0;
                        sr++;
                        var rawTransac = db.Transaction.Where(t => t.Transaction_item_type == "RawRice Sales" && t.Transaction_item_id == item.rsp_id).SingleOrDefault();
                        var raw = db.RawRice_Sales_ch.Where(r => r.rsp_id == item.rsp_id).ToList();
                        //SumAmount += raw.rsc_price;

                        foreach (var item2 in raw)
                        {
                            <tr>
                                <td>@sr</td>
                                <td>Raw Rice Selling</td>
                                <td>@rawTransac.Transaction_Description</td>
                                @{ var rate = item2.rsc_price / item2.rsc_qty; }
                                <td></td>
                                <td>@*@item2.rsc_qty*@</td>
                                <td>@item.rsp_Total_Amount</td>
                                <td>@rawTransac.Credit @{ remaining = item.rsp_Total_Amount - rawTransac.Credit;}</td>
                                <td> </td>
                                 <td>@remaining  </td>
                                @{Sumremaining += remaining; }

                                @*<td>Rs @pricing.PerBagPrice</td>
                                    @{ var reamining = item.Bags_qty - item.Bags_Sold_qty; }
                                    <td>@reamining</td>
                                    <td>@item.packing.Packing_Type kg</td>*@

                            </tr>
                                        }

                                    }


                    @foreach (var item in db.ProducedRiceSales_pt.Where(r => r.Party_Id == Model.Party_Id && r.prsp_status==true).ToList())
                    {

                        sr++;
                        remaining = 0;
                        var producedTransac = db.Transaction.Where(t => t.Transaction_item_type == "Produced Rice Sales" && t.Transaction_item_id == item.prsp_id).SingleOrDefault();
                        var raw = db.ProducedRiceSales_ch.Where(r => r.prsp_id == item.prsp_id).SingleOrDefault();


                        <tr>
                            <td>@sr</td>
                            <td>Produced Rice Selling</td>
                            <td>@raw.prsc_title</td>
                            @{ var rate = raw.prsc_price / raw.prsc_qty; }
                            <td>@rate</td>
                            <td>@raw.prsc_qty</td>
                            <td>@raw.prsc_price</td>
                            <td>@producedTransac.Credit  @{ remaining = raw.prsc_price - producedTransac.Credit;}</td>
                            <td>  </td>
                            <td>@remaining  </td>

                            @{Sumremaining += remaining; }

                        </tr>
                                }

                    @foreach (var item in db.RarRices.Where(r => r.Party_Id == Model.Party_Id).ToList())
                    {
                        remaining = 0;
                        sr++;
                        var rawTransac = db.Transaction.Where(t => t.Transaction_item_type == "RawRice" && t.Transaction_item_id == item.RawRice_id).SingleOrDefault();
                        var raw = db.Pricing.Where(r => r.item_id == item.RawRice_id && r.item_Type == "RawRice").SingleOrDefault();

                        if (rawTransac != null)
                        {
                            <tr>
                                <td>@sr</td>
                                <td>Raw Rice</td>
                                <td>@item.Item_Name</td>

                                <td>@raw.PerBagPrice</td>
                                <td>@item.Bags_qty</td>
                                <td>@raw.Pricing_NetTotal </td>
                                <td>  </td>
                                <td>@rawTransac.Debit @{ SumPaidAmount +=  rawTransac.Debit;} </td>
                                @{ remaining = raw.Pricing_NetTotal - rawTransac.Debit;}
                                <td>@remaining  </td>


                             

                            </tr>
                        }

                    }

                    @*@foreach (var item in db.RarRices.Where(r => r.Party_Id == Model.Party_Id).ToList())
                    {

                        sr++;
                        var rawTransac = db.Transaction.Where(t => t.Transaction_item_type == "RawRice" && t.Transaction_item_id == item.RawRice_id).SingleOrDefault();
                        var raw = db.Pricing.Where(r => r.item_id == item.RawRice_id && r.item_Type == "RawRice").SingleOrDefault();

                        if (rawTransac != null)
                        {
                            <tr>
                                <td>@sr</td>
                                <td>Raw Rice Purchase</td>
                                <td>@item.Item_Name</td>

                                <td>@raw.PerBagPrice</td>
                                <td>@item.Bags_qty</td>
                                <td>@raw.Pricing_NetTotal</td>  
                                <td>@rawTransac.Debit</td>




                            </tr>
                        }

                    }*@

                    @*@foreach (var item in db.Rice_Productions.Where(r =>  == Model.Party_Id).ToList())
                    {

                        sr++;
                        var rawTransac = db.Transaction.Where(t => t.Transaction_item_type == "RawRice" && t.Transaction_item_id == item.RawRice_id).SingleOrDefault();
                        var raw = db.Pricing.Where(r => r.item_id == item.RawRice_id && r.item_Type == "RawRice").SingleOrDefault();

                        if (rawTransac != null)
                        {
                            <tr>
                                <td>@sr</td>
                                <td>Raw Rice Purchase</td>
                                <td>@item.Item_Name</td>

                                <td>@raw.PerBagPrice</td>
                                <td>@item.Bags_qty</td>
                                <td>@raw.Pricing_NetTotal</td>
                                <td>@rawTransac.Debit</td>




                            </tr>
                        }

                    }*@
                </tbody>





              

            </table>

            <table class="balance">
                <tr>
                    <th><span contenteditable>Total</span></th>
                    <td></td>
                </tr>
                <tr>
                    <th><span contenteditable>Amount Paid</span></th>
                    <td></td>
                </tr>
                <tr>
                    <th><span contenteditable>Balance Due</span></th>
                    <td>@Sumremaining</td>
                </tr>
            </table>
        </article>
        <aside>
            <h1><span contenteditable>Additional Notes</span></h1>
            <div contenteditable>
                <p>A finance charge of 1.5% will be made on unpaid balances after 30 days.</p>
            </div>
        </aside>
    </body>
</html>

<script src="/Content/Invoices/index.js"></script>
</body>
</html>
